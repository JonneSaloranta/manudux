from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _
from django.utils.timezone import now
import qrcode
from io import BytesIO
from django.core.files.base import ContentFile
from PIL import Image, ImageDraw, ImageFont
from django.urls import reverse
from django.conf import settings
from urllib.parse import urlencode
import textwrap
from django.conf import settings
import os


class Guide(models.Model):
    """
    A model for guides.

    Fields:
        name (CharField): Name of the guide
        description (CharField): Guide description
        qr_code (ImageField): Autogenerated qr code for the guide
        created_at (DateTimeField): Autogenerated date
        updated_at (DateTimeField): Autogenerated date
    """

    name = models.CharField(max_length=200, unique=True)
    description = models.CharField(max_length=300, blank=True, null=True)
    qr_code = models.ImageField(upload_to="guides/qrcodes", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, blank=True, null=True)
    updated_at = models.DateTimeField(auto_now=True, blank=True, null=True)

    def __str__(self):
        return self.name

    def get_full_url(self):
        return f"{settings.SITE_URL}{reverse('manudux:guide', kwargs={'pk': self.pk})}"

    def save(self, *args, **kwargs):
        is_new = self.pk is None

        if is_new:
            # Save initially to get a primary key
            super().save(*args, **kwargs)

        # Generate QR Code
        qr = qrcode.make(self.get_full_url()).convert("RGB")

        # Define canvas size (extra height for text)
        canvas_size = (600, 600)
        canvas = Image.new("RGB", canvas_size, "white")
        draw = ImageDraw.Draw(canvas)

        font_path = os.path.join(
            settings.STATIC_ROOT, "manudux/fonts/youngserif-regular.ttf"
        )

        # Load fonts
        try:
            text_font = ImageFont.truetype(font_path, 16)  # Title/Description
            url_font = ImageFont.truetype(font_path, 16)  # URL
        except IOError as e:
            text_font = ImageFont.load_default()
            url_font = ImageFont.load_default()
            print(e)

        # Position the QR code
        qr_size = qr.size
        qr_position = (
            (canvas_size[0] - qr_size[0]) // 2,  # Center horizontally
            50,  # Leave space for title above
        )
        canvas.paste(qr, qr_position)

        # Draw guide name & description at the top
        title_text = f"{self.name} - {self.description or ''}"
        title_width = draw.textbbox((0, 0), title_text, font=text_font)[2]
        title_x = (canvas_size[0] - title_width) // 2
        draw.text((title_x, 10), title_text, fill="black", font=text_font)

        # Draw URL at the bottom (centered and wrapped)
        url = self.get_full_url()
        wrapped_url = textwrap.fill(url, width=35)
        url_lines = wrapped_url.split("\n")
        url_y = qr_position[1] + qr_size[1] + 10

        for line in url_lines:
            line_width = draw.textbbox((0, 0), line, font=url_font)[2]
            line_x = (canvas_size[0] - line_width) // 2
            draw.text((line_x, url_y), line, fill="black", font=url_font)
            url_y += 22

        # Save QR Code
        buffer = BytesIO()
        canvas.save(buffer, "PNG")
        buffer.seek(0)
        self.qr_code.save(
            f"qr_code-{self.pk}.png", ContentFile(buffer.read()), save=False
        )
        canvas.close()

        # Save updated model (only if not already saved with pk and we need to write qr_code)
        if not is_new:
            super().save(update_fields=["qr_code"])

    class Meta:
        verbose_name = _("Guide")
        verbose_name_plural = _("Guides")
